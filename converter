from pathlib import Path
import markdown2
import re

# Base project folder
base = Path(__file__).resolve().parent

# Vault location
input_dir = base / "vault"

# Output folder for final HTML
output_dir = base / "public" / "vault-html"
output_dir.mkdir(parents=True, exist_ok=True)

# File listing the folders to publish
whitelist_path = base / "pages_to_publish.txt"

# Map folders to output HTML file + template
folder_to_output = {
    "lauren": {
        "filename": "nanocrystalinealloy.html",
        "template": "templates/nano-template.html"
    },
    "deva": {
        "filename": "ferromagneticalloy.html",
        "template": "templates/ferro-template.html"
    }
}

# Function to clean and convert markdown to HTML
def process_markdown(content):
    if "<!-- PUBLISH STOP -->" in content:
        content = content.split("<!-- PUBLISH STOP -->", 1)[0].strip()

    # Convert Obsidian-style wiki links to HTML links
    content = re.sub(
        r"\[\[([^\[\]|]+)(\|([^\]]+))?\]\]",
        lambda m: f'<a href="{m.group(1).strip()}.html">{m.group(3) or m.group(1).strip()}</a>',
        content,
    )

    # Convert Obsidian-style image embeds
    content = re.sub(r"!\[\[([^\]]+)\]\]", r'<img src="\1" alt="\1">', content)

    return markdown2.markdown(content, extras=["fenced-code-blocks", "tables", "footnotes"])


# Step 1: Read list of folders from pages_to_publish.txt
with whitelist_path.open("r", encoding="utf-8") as f:
    for line in f:
        folder = line.strip().rstrip("/")
        if not folder or folder.startswith("#"):
            continue

        if folder not in folder_to_output:
            print(f"⚠️ Folder '{folder}' not mapped to an output file — skipping.")
            continue

        folder_path = input_dir / folder
        if not folder_path.is_dir():
            print(f"❌ Folder '{folder}' not found in vault — skipping.")
            continue

        # Step 2: Read and combine all Markdown files in the folder
        all_md = []
        for md_file in sorted(folder_path.rglob("*.md")):
            if md_file.name.startswith("_"):
                continue
            md_content = md_file.read_text(encoding="utf-8")
            html_piece = process_markdown(md_content)
            all_md.append(html_piece)

        combined_html = "\n\n<hr/>\n\n".join(all_md)  # Optional: add separator between notes

        # Step 3: Load the template and inject the content
        output_info = folder_to_output[folder]
        template_path = base / output_info["template"]
        out_file = output_dir / output_info["filename"]

        if not template_path.exists():
            print(f"❌ Template '{template_path}' not found — skipping.")
            continue

        template = template_path.read_text(encoding="utf-8")
        final_html = template.replace("<!-- CONTENT GOES HERE -->", combined_html)

        out_file.write_text(final_html, encoding="utf-8")
        print(f"✅ Created combined page: {out_file.relative_to(base)}")